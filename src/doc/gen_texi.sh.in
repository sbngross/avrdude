#!/bin/sh -e

if [ -n "@SCRIPT_DEBUG@" ]
then
	set -x
fi

MAIN_EXE=@MAIN_EXE@
AWK_BIN=@AWK_BIN@
COMMENTS=@COMMENTS@

MAIN_DOC=@MAIN_TEXI@

PROJ_VERSION=@CMAKE_PROJECT_VERSION@
PROJ_ROOT=@CMAKE_SOURCE_DIR@

UPDATE_TIME_FULL=
UPDATE_TIME_SHORT=

EDITION_DATE=@PROJ_VERSION_DATE@
VERSION_DATE=@PROJ_VERSION_DATE@
VER_SUFFIX=

DATE_LOCALE=C

OUT_FILE=${1}

call_avrdude()
{
	local args=${1}
	local cmd=${2}
	local expr=${3}
	${MAIN_EXE} \
		${args} 2>&1 \
		| ${AWK_BIN} "${cmd}" \
		| sed "${expr}"
}

call_git()
{
	local cmd=${1}
	shift 1
	git -C ${PROJ_ROOT} \
		${cmd} \
		--quiet \
		--date="format:%Y%m%d" \
		${@} \
		;
}

set_update_time()
{
	local epoch=$(stat --printf="%Y" ${MAIN_DOC})
	#TODO: check this and get system info
#	local epoch_bsd$(stat -f "%m" ${MAIN_DOC}) # presumably works for BSD

	UPDATE_TIME_FULL=$(LC_TIME=${DATE_LOCALE} date --date=@${epoch} +"%e. %B %Y")
	UPDATE_TIME_SHORT=$(LC_TIME=${DATE_LOCALE} date --date=@${epoch} +"%B %Y")
}

set_git_version()
{
	local tag=v${PROJ_VERSION}
	local dirty=$(call_git diff && call_git diff --cached || echo -dirty)

	EDITION_DATE=$(call_git show ${tag} --format="%cd" --always)
	VERSION_DATE=$(call_git show --format="%cd")
	VER_SUFFIX=$(call_git show --format="%h")

	VER_SUFFIX=git-${VER_SUFFIX}${dirty}
}

build_version()
{
	set_update_time

	if call_git status
	then
		set_git_version
	fi

	echo "@set UPDATED ${UPDATE_TIME_FULL}"
	echo "@set UPDATED-MONTH ${UPDATE_TIME_SHORT}"
	echo "@set EDITION ${PROJ_VERSION}-${EDITION_DATE}"
	echo "@set VERSION ${PROJ_VERSION}-${VERSION_DATE}-${VER_SUFFIX}"
}

# This one is a special case so handle it before the others
if [ "${OUT_FILE}" = "version.texi" ]
then
	build_version > ${OUT_FILE}
	exit 0
fi

AVRDUDE_ARGS=

# Those two will be set to some unitelligible gibberish that somehow works.
# Don't ask me "HOW" - I'm just pressing the buttons here...
# Originated from Makefile.am with some adaptions regarding escaping
AWK_CMD=
SED_EXPR=

case ${OUT_FILE} in
programmers.texi)
	AVRDUDE_ARGS="-c ?"
	AWK_CMD='$2 ~ /^=$/ {printf("@item @code{%s} @tab %s\n",$1,gensub("[^=]+=[ \t]*","",1))}'
	SED_EXPR='s# *,\? *<\?\(http://[^ \t>]*\)>\?#,@*\n@url{\1}#g'
	;;
programmer_types.texi)
	AVRDUDE_ARGS="-c ? type"
	AWK_CMD='$2 ~ /^=$/ {printf("@item @code{%s} @tab %s\n",$1,gensub("[^=]+=[ \t]*","",1))}'
	SED_EXPR='s#<\?\(http://[^ \t,>]*\)>\?#@url{\1}#g'
	;;
parts.texi)
	AVRDUDE_ARGS="-p ?"
	AWK_CMD='$2 ~ /^=$/ {printf("@item @code{%s} @tab %s\n",$1,$3)}'
	SED_EXPR=$(sed 's:\([^ \t]*\)[ \t]*\(.*\):s/\1$/\1 \2/g:g' < ${COMMENTS})
	;;
*)
	exit 22
	;;
esac

call_avrdude \
	"${AVRDUDE_ARGS}" \
	"${AWK_CMD}" \
	"${SED_EXPR}" \
	> ${OUT_FILE}
